import Foundation
import ReactiveSwift

{{#services}}
public enum Route {
{{#funcs}}
  case {{route}}
{{/funcs}}
}

public typealias GatewayFactory = (Route, APIService, @escaping RequestProvider) -> Gateway
public typealias RequestProviderFactory = (Route, @escaping RequestProvider) -> RequestProvider


public class APIRequestManager {

    let baseURL: URL
    let service: APIService
    let requestProviderFactory: RequestProviderFactory?
    let gatewayFactory: GatewayFactory

    static let defaultGatewayFactory: GatewayFactory = {  _ /* route */, service, provider in
        GatewayImpl(apiService: service, requestProvider: provider)
    }

    static let defaultCallBack: RequestProviderFactory = {  _ /* route */, provider in
        provider
    }

    public init(
        service: APIService,
        baseURL: URL = URL(string:"{{location}}")!,
        requestProviderFactory: @escaping RequestProviderFactory = APIRequestManager.defaultCallBack,
        gatewayFactory: @escaping GatewayFactory = APIRequestManager.defaultGatewayFactory
    ) {
        self.service = service
        self.requestProviderFactory = requestProviderFactory
        self.gatewayFactory = gatewayFactory
        self.baseURL = baseURL
    }

{{#funcs}}
    public func {{name}}({{#interfaceParams}}{{{name}}}: {{{type}}}{{{delimiter}}}{{/interfaceParams}}) -> SignalProducer<{{return_type}}, APIResponseError<NSError>> {
        let url = URL(string:baseURL.absoluteString + "{{path}}")!
        let requestProvider = requestProviderForRoute(.{{route}}) {
            return Request(
                url: url,
                method: .{{method}},
                encoding: .{{encoding}}{{#hasBodyParams}},
                params:[
                    {{#bodyParams}}
                    "{{name}}": {{name}}.toJSONRepresentation() {{delimiter}}
                    {{/bodyParams}}
                ]{{/hasBodyParams}}
            )
        }
        let gateway = gatewayFactory(.{{route}}, service, requestProvider)
        return gateway.request({{return_type}}.deserialize)
    }

{{/funcs}}

    func requestProviderForRoute(_ route: Route, originalProvider: @escaping RequestProvider) -> RequestProvider {
        guard let factory = self.requestProviderFactory else {
            return originalProvider
        }
        return factory(route, originalProvider)
    }
}
{{/services}}

// MARK: - Reactive Cocoa Gateway Extension

public extension Gateway {
    func request<T>(_ responseTransformer: @escaping (Data?) -> Result<T, NSError>) -> SignalProducer<T, APIResponseError<NSError>> {
        return SignalProducer { observer, disposable in
            let cancelable = self.requestWithCallback(responseTransformer) { (result:Result<APIResponse<T>, APIResponseError<NSError>>) in
                switch result {
                case .success(let response):
                    observer.send(value: response.value)
                    observer.sendCompleted()
                case .failure(let responseError):
                    observer.send(error: responseError)
                }
            }
            disposable.add {
                cancelable.cancel()
            }
        }
    }
}
