//  SwiftAPIRequestManager.swift
//
//  Autogenerated by KEYPR.com with helium
//
//

import Foundation
import ReactiveSwift

{{#services}}
extension Route {
    public enum {{routeEnumName}} {
{{#funcs}}
        case {{route}}
{{/funcs}}
    }
}

public class {{requestManagerAlias}} {

    let baseURL: URL
    let service: APIService
    let requestProviderFactory: RequestProviderFactory?
    let gatewayFactory: GatewayFactory

    public static let defaultGatewayFactory: GatewayFactory = {  _ /* route */, service, provider in
        GatewayImpl(apiService: service, requestProvider: provider)
    }

    public static let defaultCallBack: RequestProviderFactory = {  _ /* route */, provider in
        provider
    }

    public init(
        service: APIService,
        baseURL: URL = URL(string:"{{location}}")!,
        requestProviderFactory: @escaping RequestProviderFactory = {{requestManagerAlias}}.defaultCallBack,
        gatewayFactory: @escaping GatewayFactory = {{requestManagerAlias}}.defaultGatewayFactory
    ) {
        self.service = service
        self.requestProviderFactory = requestProviderFactory
        self.gatewayFactory = gatewayFactory
        self.baseURL = baseURL
    }

{{#funcs}}
    public func {{name}}({{#interfaceParams}}{{{name}}}: {{{type}}}{{{delimiter}}}{{/interfaceParams}}) -> SignalProducer<{{return_type}}, APIResponseError<NSError>> {
        let url = URL(string:baseURL.absoluteString + "{{path}}"{{#pathExtensions}} + "{{{separator}}}{{name}}=" + {{value}}{{/pathExtensions}})!
        let requestProvider = requestProviderForRoute(Route.{{routeEnumName}}.{{route}}.hashValue) {
            return Request(
                url: url,
                method: .{{method}},
                encoding: .{{encoding}}{{#isParameterAsDictionary}},
                params:{{parameterAsDictionary}}{{/isParameterAsDictionary}}{{#hasBodyParams}},
                params:[
                    {{#bodyParams}}
                    "{{canonicalName}}": {{name}}{{postfix}}{{delimiter}}
                    {{/bodyParams}}
                ]{{/hasBodyParams}}
            )
        }
        let gateway = gatewayFactory(Route.{{routeEnumName}}.{{route}}.hashValue, service, requestProvider)
        return gateway.request({{return_type}}.deserialize)
    }

{{/funcs}}

    func requestProviderForRoute(_ route: Int, originalProvider: @escaping RequestProvider) -> RequestProvider {
        guard let factory = self.requestProviderFactory else {
            return originalProvider
        }
        return factory(route, originalProvider)
    }
}
{{/services}}
