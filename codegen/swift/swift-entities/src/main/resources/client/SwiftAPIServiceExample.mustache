import Foundation

extension URLSessionDataTask: Cancellable {}

public struct NSURLSessionAPIService: APIService {

    public typealias RequestLogger = (_ request: Request, _ urlRequest: URLRequest) -> ()
    public typealias ResponseLogger = (_ request: Request, _ urlRequest: URLRequest, _ data: Data?, _ response: HTTPURLResponse?, _ error: Error?) -> ()

    let session: URLSession
    let requestLogger: RequestLogger
    let responseLogger: ResponseLogger

    public init(requestLogger: @escaping RequestLogger = {_,_  in }, responseLogger: @escaping ResponseLogger = { _,_,_,_,_  in } ) {
        session = URLSession(configuration: URLSessionConfiguration.default)
        self.requestLogger = requestLogger
        self.responseLogger = responseLogger
    }

    public func request(_ request: Request, callback: @escaping APIServiceRequestCallback) -> Cancellable {

        let urlRequest = convert(fromRequest: request)
        requestLogger(request, urlRequest)

        let cancellable = session.dataTask(with: urlRequest, completionHandler: { (data, urlResponse, error) in
            let httpURLResponse = urlResponse as? HTTPURLResponse
            self.responseLogger(request, urlRequest, data, httpURLResponse, error)
            if let error = error {
                callback(.failure(APIResponseError(error: error as NSError, request:request, response: httpURLResponse)))
                return
            }
            let nsdata = data.flatMap{ (NSData(data: $0) as Data) }
            callback(.success(APIResponse(value: nsdata, response: httpURLResponse)))
        })
        cancellable.resume()

        return cancellable
    }

    func convert(fromRequest request: Request) -> URLRequest {
        let url = makeUrl(fromRequest: request)

        let mutableRequest = NSMutableURLRequest(url: url)
        updateMethod(forMutableRequest: mutableRequest, fromRequest: request)
        updateContentType(forMutableRequest: mutableRequest, fromRequest: request)
        updateHeaders(forMutableRequest: mutableRequest, fromRequest: request)
        updateBody(forMutableRequest: mutableRequest, fromRequest: request)
        return mutableRequest as URLRequest
    }

    func updateMethod(forMutableRequest request: NSMutableURLRequest, fromRequest: Request) {
        request.httpMethod = fromRequest.method.rawValue
    }

    func updateBody(forMutableRequest request: NSMutableURLRequest, fromRequest: Request) {
        switch fromRequest.encoding {
        case .URL:
            break;
        case .JSON:
            guard let data = try? JSONSerialization.data(withJSONObject: fromRequest.params, options: []) else {
                return
            }
            request.httpBody = data
        case .FORM:
            let data = formEncodedParameters(fromRequest.params).data(using: String.Encoding.utf8)
            request.httpBody = data
            return
        }
    }

    func updateContentType(forMutableRequest request: NSMutableURLRequest, fromRequest: Request) {
        switch fromRequest.encoding {
        case .URL:
            break;
        case .FORM:
            request.addValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
        case .JSON:
            request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        }
    }

    func updateHeaders(forMutableRequest request: NSMutableURLRequest, fromRequest: Request) {
        for (key, value) in fromRequest.headers {
            request.setValue(value, forHTTPHeaderField: key)
        }
    }

    func makeUrl(fromRequest request: Request) -> URL {
        switch request.encoding {
        case .URL:
            return url(request.url as URL, withParameters: request.params)
        case .FORM, .JSON:
            return request.url as URL
        }
    }

    func url(_ url: URL, withParameters parameters:[String:Any]) -> URL {
        let encodedParameters = formEncodedParameters(parameters)
        if encodedParameters.isEmpty {
            return url
        }

        let hasQuestionMark = url.absoluteString.contains("?")
        let joiningCharacter = hasQuestionMark ? "&" : "?"
        return URL(string: url.absoluteString + joiningCharacter + encodedParameters)!
    }

    func formEncodedParameters(_ parameters: [String:Any]) -> String {
        return parameters.map { key, value in
            let encodedValue = "\(value)".urlEncoded()
            let encodedKey = key.urlEncoded()
            return encodedKey + "=" + encodedValue
            }
            .joined(separator: "&")
    }
}

private extension String {
    func urlEncoded() -> String {
        return self.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!
    }
}
